In Tae Chung, 128 958 220, itchung@myseneca.ca

In the first part of the workshop, creating overloads of constructors was a lot simpler to do than I initially thought. However, I did run into a lot of trouble when setting the conditions for how the functions should behave. Although the 'bool m_usable' was part of the object, certain ways the conditions were set to behave were more complex and I had a difficult time making the output print properly.
Functions like the 'pour' functions were especially tricky for me to grasp and required numerous attempts at what conditions I needed to verify, and what exact variable values I was dealing with.

Thanks to the lab portion of the workshop, after studying over the code, the DIY portion was a bit more approachable. While writing the code I realized that certain functions had to be made public as they were being used by other member functions. Although the DIY was dealing with 2 classes instead of 1 like in the Lab, I found that the way the classes were supposed to behave were much simpler, so the logic for the DIY felt a little less confusing.

One particular problem I had to look into was using the 'cin.getline' function. I used this function within my readLabel function for receiving the label content from the user in my Label.cpp file. I ran into trouble where I found I had to press enter twice in order for the program to move onto the next part of the code. I realized this was most like a problem with the buffer and so I tried to incorporate a function that would flush the buffer, but the problem persisted. I searched online and found that using a cin.get() may not work so cohesively with a cin.getline() function, but at the same time also found that different overloads for the getline function existed. So instead of using the getline function with 2 arguments, if I added a third argument which signified a delimiter. After setting this delimiter to a newline character, the program behaved as expected.
